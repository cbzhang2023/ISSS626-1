--- 
title: "Take-home EX01"
author: "Zhang Chenbin"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
format: 
  html:
    code-fold: true
runtime: shiny
---

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse, spatstat, lubridate, shiny, leaflet, leaflet.extras2)
```

```{r}
car_acc <- read.csv('data/thai_road_accident_2019_2022.csv') %>%
  # Remove rows with missing longitude or latitude
  filter(!is.na(longitude) & !is.na(latitude)) %>%
  
  # Create new columns for month and day of the week
  mutate(Month_num = month(incident_datetime)) %>%
  mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%
  mutate(dayofweek = day(incident_datetime)) %>%
  
  # Convert the data frame to a spatial sf object
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  
  # Transform to a different CRS (Coordinate Reference System)
  st_transform(crs = 32647)
```

```{r}
#| eval: false
write_rds(car_acc,"data/acc.rds")

```

```{r}
acc <- read_rds("data/acc.rds")
```

```{r}
roads <- st_read(dsn="data", 
                   layer="hotosm_tha_roads_lines_shp")
```

```{r}
adm1 <- st_read(dsn="data", 
                   layer="tha_admbnda_adm1_rtsd_20220121")
```

```{r}
adm2 <- st_read(dsn="data", 
                   layer="tha_admbnda_adm2_rtsd_20220121")
```

```{r}
adm3 <- st_read(dsn="data", 
                   layer="tha_admbnda_adm3_rtsd_20220121")
```

```{r}
# 筛选曼谷省的边界（adm1 - 省级边界）
bangkok_province <- adm1 %>%
  filter(ADM1_EN == "Bangkok")  # 假设 ADM1_EN 是省名字段

# 筛选曼谷市的边界（adm2 - 市级边界）
bangkok_city <- adm2 %>%
  filter(ADM1_EN == "Bangkok")  # 假设市级边界仍然是 "Bangkok"

# 筛选曼谷区的边界（adm3 - 区级边界）
bangkok_district <- adm3 %>%
  filter(ADM1_EN == "Bangkok")  # 假设区级边界字段仍为 "Bangkok"



```

```{r}
# 检查 car_acc 和 bangkok_province 的 CRS
st_crs(car_acc)  # 检查交通事故数据的 CRS
st_crs(bangkok_province)  # 检查曼谷省边界的 CRS

# 如果两个 CRS 不同，将其中一个转换为与另一个相同的 CRS
# 例如，如果需要将 bangkok_province 转换为与 car_acc 相同的 CRS
bangkok_province <- st_transform(bangkok_province, crs = st_crs(car_acc))

# 进行空间相交操作
car_acc_bangkok <- st_intersection(car_acc, bangkok_province)


```

```{r}
# 确保所有筛选后的数据（bangkok_province, bangkok_city, bangkok_district）的 CRS 与 car_acc_bangkok 一致
bangkok_province <- st_transform(bangkok_province, crs = st_crs(car_acc_bangkok))
bangkok_city <- st_transform(bangkok_city, crs = st_crs(car_acc_bangkok))
bangkok_district <- st_transform(bangkok_district, crs = st_crs(car_acc_bangkok))

# 先将省级（bangkok_province）的信息合并到曼谷的交通事故数据中
car_acc_bangkok_adm1 <- st_join(car_acc_bangkok, bangkok_province)

# 再将市级（bangkok_city）的信息合并到已包含省级数据的事故数据中
car_acc_bangkok_adm1_adm2 <- st_join(car_acc_bangkok_adm1, bangkok_city)

# 最后将区级（bangkok_district）的信息合并到已包含省、市级数据的事故数据中
car_acc_bangkok_full <- st_join(car_acc_bangkok_adm1_adm2, bangkok_district)
```

```{r}
tmap_mode("view")

# 绘制曼谷交通事故点图
tm_shape(bangkok_district) +  # 显示曼谷的区级边界
  tm_borders(col = "gray", lwd = 2) +  # 设置边界颜色和宽度
  tm_shape(car_acc_bangkok_full) +  # 交通事故数据
  tm_dots(alpha = 0.6, size = 0.05, col = "black") +  # 设置点的透明度、大小和颜色
  tm_layout(title = "曼谷交通事故分布", title.size = 1.5, legend.outside = TRUE)
```

```{r}
# 为 roads 数据手动设置 CRS 为 EPSG:32647 (WGS 84 / UTM zone 47N)
st_crs(roads) <- 32647  # 设置坐标参考系统

# 检查设置后的 CRS
st_crs(roads)

# 确保 car_acc_bangkok_full 和 roads 的 CRS 一致
roads <- st_transform(roads, crs = st_crs(car_acc_bangkok_full))

# 进行空间连接，基于位置将事故数据与道路数据连接
acc_roads_joined <- st_join(car_acc_bangkok_full, roads)
```

111

111

```{r}
library(dplyr)
library(lubridate)

# 假设你的数据现在叫做 acc_roads_joined
acc_roads_joined <- acc_roads_joined %>%
  mutate(year = year(incident_datetime))  # 从 incident_datetime 提取年份

# 分别提取 2019 到 2022 年的数据
acc_2019 <- filter(acc_roads_joined, year == 2019)
acc_2020 <- filter(acc_roads_joined, year == 2020)
acc_2021 <- filter(acc_roads_joined, year == 2021)
acc_2022 <- filter(acc_roads_joined, year == 2022)

tmap_mode("view")

library(tmap)
library(leaflet)
library(leafsync)

# 使用 tmap 生成多个单独的 leaflet 地图
map_2019 <- tm_shape(bangkok_district) +
  tm_borders(col = "gray", lwd = 2) +
  tm_shape(acc_2019) +
  tm_dots(alpha = 0.6, size = 0.05, col = "black") +
  tm_layout(title = "曼谷交通事故分布 2019", title.size = 1.5)

map_2020 <- tm_shape(bangkok_district) +
  tm_borders(col = "gray", lwd = 2) +
  tm_shape(acc_2020) +
  tm_dots(alpha = 0.6, size = 0.05, col = "black") +
  tm_layout(title = "曼谷交通事故分布 2020", title.size = 1.5)

map_2021 <- tm_shape(bangkok_district) +
  tm_borders(col = "gray", lwd = 2) +
  tm_shape(acc_2021) +
  tm_dots(alpha = 0.6, size = 0.05, col = "black") +
  tm_layout(title = "曼谷交通事故分布 2021", title.size = 1.5)

map_2022 <- tm_shape(bangkok_district) +
  tm_borders(col = "gray", lwd = 2) +
  tm_shape(acc_2022) +
  tm_dots(alpha = 0.6, size = 0.05, col = "black") +
  tm_layout(title = "曼谷交通事故分布 2022", title.size = 1.5)

# 将 tmap 转换为 leaflet
leaflet_2019 <- tmap_leaflet(map_2019)
leaflet_2020 <- tmap_leaflet(map_2020)
leaflet_2021 <- tmap_leaflet(map_2021)
leaflet_2022 <- tmap_leaflet(map_2022)

# 使用 leafsync 将四个地图同步
sync(leaflet_2019, leaflet_2020, leaflet_2021, leaflet_2022)


```

```{r}
# 加载必要的库
library(dplyr)
library(lubridate)
library(tmap)
library(leaflet)
library(sf)

# 假设 acc_roads_joined 和 bangkok_district 使用的是 EPSG:32647
# 将它们转换为 EPSG:4326
acc_roads_joined <- st_transform(acc_roads_joined, crs = 4326)
bangkok_district <- st_transform(bangkok_district, crs = 4326)

# 创建一个交互选择框的调色板
pal <- colorFactor(palette = "Set1", domain = acc_roads_joined$presumed_cause)

# 创建地图并使用 leaflet 实现交互式选择框
leaflet_map <- leaflet() %>%
  addTiles() %>%
  addPolygons(data = bangkok_district, color = "gray", weight = 2) %>%
  addCircleMarkers(data = acc_roads_joined, 
                   color = ~pal(presumed_cause), 
                   popup = ~presumed_cause, 
                   group = ~presumed_cause) %>%
  addLayersControl(
    overlayGroups = unique(acc_roads_joined$presumed_cause),
    options = layersControlOptions(collapsed = FALSE)
  )

# 显示地图
leaflet_map

```

```{r}
library(shiny)
library(tmap)
library(dplyr)

# 假设你的数据是 acc_roads_joined
acc_roads_joined <- acc_roads_joined %>%
  mutate(year = year(incident_datetime))  # 从 incident_datetime 提取年份

# 创建Shiny UI
ui <- fluidPage(
  titlePanel("Bangkok Traffic Accidents"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selected_cause", "Select Cause:", choices = unique(acc_roads_joined$presumed_cause), selected = "speeding"),
      selectInput("selected_year", "Select Year:", choices = c("2019", "2020", "2021", "2022"), selected = "2019")
    ),
    mainPanel(
      tmapOutput("accident_map")  # 显示 tmap 地图
    )
  )
)

# Shiny服务器逻辑
server <- function(input, output, session) {
  # 基于用户选择的原因和年份进行数据过滤
  filtered_data <- reactive({
    acc_roads_joined %>%
      filter(year == as.numeric(input$selected_year) & presumed_cause == input$selected_cause)
  })
  
  # 生成地图
  output$accident_map <- renderTmap({
    tm_shape(bangkok_district) +
      tm_borders(col = "gray", lwd = 2) +
      tm_shape(filtered_data()) +
      tm_dots(size = 0.1, alpha = 0.7, col = "black", popup.vars = c("Year" = "year", "Cause" = "presumed_cause")) +
      tm_layout(title = paste("Bangkok Traffic Accidents", input$selected_year))
  })
}

# 运行Shiny应用程序
shinyApp(ui, server)

```
